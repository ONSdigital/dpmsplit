// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ipf
NumericMatrix ipf(NumericMatrix m, NumericVector rowsums, NumericVector colsums, int max_iter, double tolerance);
RcppExport SEXP _dpmsplit_ipf(SEXP mSEXP, SEXP rowsumsSEXP, SEXP colsumsSEXP, SEXP max_iterSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rowsums(rowsumsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type colsums(colsumsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(ipf(m, rowsums, colsums, max_iter, tolerance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dpmsplit_ipf", (DL_FUNC) &_dpmsplit_ipf, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dpmsplit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
