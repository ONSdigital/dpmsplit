% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split.R
\name{split_multi}
\alias{split_multi}
\title{Split flows for multiple populations}
\usage{
split_multi(
  totals_in,
  totals_out,
  reported_int,
  reported_im,
  reported_em,
  epsilon = 0.001,
  max_iter = 1000L,
  tolerance = 1e-06
)
}
\arguments{
\item{totals_in, totals_out}{Data frames holding total estimated
ins and outs. Both include a \code{region} variable,
a \code{count} variable (which can be numeric or a list of numeric vectors),
and, optionally, further classifying variables.}

\item{reported_int, reported_im, reported_em}{Data frames holding
detailed data on internal migration, immigration, and emigration.
All three include variables \code{region_orig},
\code{region_dest}, and \code{count}, and, optionally
further classifying variables.}

\item{epsilon}{Small quantity added to off-diagonal
elements of \code{reported_int} and all elements of
\code{reported_im} and \code{reported_em}.
Defaults to 0.001.}

\item{max_iter}{Maximum number of iterations allowed in iterative
proportional fitting. Defaults to 1000.}

\item{tolerance}{Maximum absolute difference between supplied
row/column totals and calculated row/column totals in
iterative proportional fitting. Defaults to 0.000001.}
}
\value{
A named list, containing data frames
\code{internal}, \code{immigration},
and \code{emigration}.
.
}
\description{
Simultaneously split out migration flows
for multiple populations. Flows include
internal migration (ie between areas within
the country), immigration and emigration.
Internally, the splitting is done via
iterative proportional fitting.
}
\details{
Data frames \code{totals_in} and \code{totals_out}
hold total inflows and total outflows by region,
and always have \code{region} and \code{count} variables.
\code{totals_in} and \code{totals_out} typically
also have additional variables holding classification
variables such as age,
sex/gender, and time. The \code{count} variables
of \code{totals_in} and \code{totals_out} can
be numeric vectors or, to represent
draws from a posterior distribution, lists of numeric vectors.
\code{totals_in} and \code{totals_out} are
typically constructed by concatenating
\code{immigration} and \code{emigration} estimates
obtained by running function \code{estimate_account} in package
\code{dpmaccount} on multiple populations.

Data frames \code{reported_int}, \code{reported_im},
and \code{reported_em} hold reported values for all
internal migration, immigration, and emigration
flows that are being estimated. All three data frames
must have \code{region_orig}, \code{region_dest},
and \code{count} variables. The categories
included in \code{region_orig} and
\code{region_dest} varies with the data frame:\tabular{lll}{
    \tab \code{region_orig} \tab \code{region_dest} \cr
   \code{reported_int} \tab Areas inside country \tab Areas inside country \cr
   \code{reported_im} \tab Areas outside country \tab Areas inside country \cr
   \code{reported_em} \tab Areas inside country \tab Areas outside country \cr
}


All three data frames can, in addition,
have classifying variables. These variables
must be the same as, or a subset of,
the classifying variables
in \code{totals_in} and \code{totals_out}.
The values of the classification variables
in \code{reported_int},
\code{reported_im}, and \code{reported_em}
must be the same as, or a subset of, the
values of the classification variables
in \code{totals_in} and \code{totals_out}.
The count variable in \code{reported_int},
\code{reported_im}, and \code{reported_em}
must be numeric: unlike in \code{totals_in}
and \code{totals_out}, it cannot be a list.

The value \code{epsilon} is added to
off-diagonal elements of \code{reported_int}
and all elements of \code{reported_im} and
\code{reported_em} to
speed convergence and avoid numeric problems
with sparse data. \code{epsilon} defaults to
0.001, but can be set to 0.
}
\examples{
totals_in <- data.frame(
  year = c(2020, 2020, 2021, 2021),
  region = c("a", "b", "a", "b"),
  count = c(13, 8, 5, 12)
)
totals_out <- data.frame(
  year = c(2020, 2020, 2021, 2021),
  region = c("a", "b", "a", "b"),
  count = c(9, 11, 8, 11)
)
reported_int <- data.frame(
  year = c(2020, 2020, 2021, 2021),
  region_orig = c("a", "b", "a", "b"),
  region_dest = c("b", "a", "b", "a"),
  count = c(3, 8, 4, 2)
)
reported_im <- data.frame(
  year = c(2020, 2020, 2021, 2021),
  region_orig = c("x", "x"),
  region_dest = c("a", "b"),
  count = c(4, 1)
)
reported_em <- data.frame(
  year = c(2020, 2020, 2021, 2021),
  region_orig = c("a", "b"),
  region_dest = c("x", "x"),
  count = c(3, 5)
)
split_multi(
  totals_in = totals_in,
  totals_out = totals_out,
  reported_int = reported_int,
  reported_im = reported_im,
  reported_em = reported_em
)
}
\seealso{
\code{\link{split_single}}
}
